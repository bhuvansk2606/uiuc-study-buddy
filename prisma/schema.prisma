// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  netId         String?   @unique
  phoneNumber   String?
  accounts      Account[]
  sessions      Session[]
  courses       Course[]
  matches       Match[]   @relation("UserMatches")
  messages      Message[]
  sentMessages      DirectMessage[] @relation("SentMessages")
  receivedMessages  DirectMessage[] @relation("ReceivedMessages")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id          String    @id @default(cuid())
  code        String    @unique // e.g., "CS 225"
  name        String    // e.g., "Data Structures"
  users       User[]
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Match {
  id        String   @id @default(cuid())
  users     User[]   @relation("UserMatches")
  course    String   // Course code
  status    String   // "pending", "accepted", "rejected"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  content   String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DirectMessage {
  id         String   @id @default(cuid())
  content    String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  recipient  User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
  recipientId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
} 